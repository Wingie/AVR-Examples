
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000082  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000002b  00000000  00000000  00000962  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000e2  00000000  00000000  0000098d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000094  00000000  00000000  00000a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b4  00000000  00000000  00000b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ae  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000002b  00000000  00000000  00000d96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/interrupt.h>

uint16_t ReadChannel(int mux);

int main (void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	DDRC = 0xFF;
  76:	84 e3       	ldi	r24, 0x34	; 52
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	2f ef       	ldi	r18, 0xFF	; 255
  7c:	fc 01       	movw	r30, r24
  7e:	20 83       	st	Z, r18
	uint16_t adcval = 0;
  80:	1a 82       	std	Y+2, r1	; 0x02
  82:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		adcval = ReadChannel(0);
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 59 00 	call	0xb2	; 0xb2 <ReadChannel>
  8c:	9a 83       	std	Y+2, r25	; 0x02
  8e:	89 83       	std	Y+1, r24	; 0x01
		if(adcval <400)
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	9a 81       	ldd	r25, Y+2	; 0x02
  94:	f1 e0       	ldi	r31, 0x01	; 1
  96:	80 39       	cpi	r24, 0x90	; 144
  98:	9f 07       	cpc	r25, r31
  9a:	28 f4       	brcc	.+10     	; 0xa6 <main+0x3a>
		{
				PORTC = 0;
  9c:	85 e3       	ldi	r24, 0x35	; 53
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	fc 01       	movw	r30, r24
  a2:	10 82       	st	Z, r1
		}
		else
		{
			PORTC = 0xFF;
		}
	}		
  a4:	ef cf       	rjmp	.-34     	; 0x84 <main+0x18>
		{
				PORTC = 0;
		}
		else
		{
			PORTC = 0xFF;
  a6:	85 e3       	ldi	r24, 0x35	; 53
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
		}
	}		
  b0:	e9 cf       	rjmp	.-46     	; 0x84 <main+0x18>

000000b2 <ReadChannel>:
} 

uint16_t ReadChannel(int mux)
{
  b2:	df 93       	push	r29
  b4:	cf 93       	push	r28
  b6:	00 d0       	rcall	.+0      	; 0xb8 <ReadChannel+0x6>
  b8:	00 d0       	rcall	.+0      	; 0xba <ReadChannel+0x8>
  ba:	0f 92       	push	r0
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	9d 83       	std	Y+5, r25	; 0x05
  c2:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t i;
	uint16_t result = 0; 
  c4:	1b 82       	std	Y+3, r1	; 0x03
  c6:	1a 82       	std	Y+2, r1	; 0x02

	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0); 
  c8:	86 e2       	ldi	r24, 0x26	; 38
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	23 e8       	ldi	r18, 0x83	; 131
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
	ADMUX = mux; // channel select
  d2:	87 e2       	ldi	r24, 0x27	; 39
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	2c 81       	ldd	r18, Y+4	; 0x04
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
	ADMUX |= (1<<REFS1) | (1<<REFS0); // VCC
  dc:	87 e2       	ldi	r24, 0x27	; 39
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	27 e2       	ldi	r18, 0x27	; 39
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	20 81       	ld	r18, Z
  e8:	20 6c       	ori	r18, 0xC0	; 192
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18

	ADCSRA |= (1<<ADSC); // start ADC
  ee:	86 e2       	ldi	r24, 0x26	; 38
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	26 e2       	ldi	r18, 0x26	; 38
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	f9 01       	movw	r30, r18
  f8:	20 81       	ld	r18, Z
  fa:	20 64       	ori	r18, 0x40	; 64
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
	while ( ADCSRA & (1<<ADSC) ) {
 100:	00 00       	nop
 102:	86 e2       	ldi	r24, 0x26	; 38
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fc 01       	movw	r30, r24
 108:	80 81       	ld	r24, Z
 10a:	88 2f       	mov	r24, r24
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	80 74       	andi	r24, 0x40	; 64
 110:	90 70       	andi	r25, 0x00	; 0
 112:	00 97       	sbiw	r24, 0x00	; 0
 114:	b1 f7       	brne	.-20     	; 0x102 <ReadChannel+0x50>
	; 
	}

	for(i=0;i<4;i++)
 116:	19 82       	std	Y+1, r1	; 0x01
 118:	22 c0       	rjmp	.+68     	; 0x15e <ReadChannel+0xac>
	{
		ADCSRA |= (1<<ADSC); 
 11a:	86 e2       	ldi	r24, 0x26	; 38
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	26 e2       	ldi	r18, 0x26	; 38
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	f9 01       	movw	r30, r18
 124:	20 81       	ld	r18, Z
 126:	20 64       	ori	r18, 0x40	; 64
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
		while ( ADCSRA & (1<<ADSC) ) {
 12c:	00 00       	nop
 12e:	86 e2       	ldi	r24, 0x26	; 38
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	fc 01       	movw	r30, r24
 134:	80 81       	ld	r24, Z
 136:	88 2f       	mov	r24, r24
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	80 74       	andi	r24, 0x40	; 64
 13c:	90 70       	andi	r25, 0x00	; 0
 13e:	00 97       	sbiw	r24, 0x00	; 0
 140:	b1 f7       	brne	.-20     	; 0x12e <ReadChannel+0x7c>
		; 
		}
		result += ADCW; 
 142:	84 e2       	ldi	r24, 0x24	; 36
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	91 81       	ldd	r25, Z+1	; 0x01
 14c:	2a 81       	ldd	r18, Y+2	; 0x02
 14e:	3b 81       	ldd	r19, Y+3	; 0x03
 150:	82 0f       	add	r24, r18
 152:	93 1f       	adc	r25, r19
 154:	9b 83       	std	Y+3, r25	; 0x03
 156:	8a 83       	std	Y+2, r24	; 0x02
	ADCSRA |= (1<<ADSC); // start ADC
	while ( ADCSRA & (1<<ADSC) ) {
	; 
	}

	for(i=0;i<4;i++)
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	8f 5f       	subi	r24, 0xFF	; 255
 15c:	89 83       	std	Y+1, r24	; 0x01
 15e:	89 81       	ldd	r24, Y+1	; 0x01
 160:	84 30       	cpi	r24, 0x04	; 4
 162:	d8 f2       	brcs	.-74     	; 0x11a <ReadChannel+0x68>
		; 
		}
		result += ADCW; 
	}
	
	ADCSRA &= ~(1<<ADEN); // ADC deactivate (2)
 164:	86 e2       	ldi	r24, 0x26	; 38
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	26 e2       	ldi	r18, 0x26	; 38
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	2f 77       	andi	r18, 0x7F	; 127
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
	result /= 4; 
 176:	8a 81       	ldd	r24, Y+2	; 0x02
 178:	9b 81       	ldd	r25, Y+3	; 0x03
 17a:	96 95       	lsr	r25
 17c:	87 95       	ror	r24
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	9b 83       	std	Y+3, r25	; 0x03
 184:	8a 83       	std	Y+2, r24	; 0x02
	return result;
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	9b 81       	ldd	r25, Y+3	; 0x03
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	cf 91       	pop	r28
 196:	df 91       	pop	r29
 198:	08 95       	ret

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
