
Blinking_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000180  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000082  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000922  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000033  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000128  00000000  00000000  00000975  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000bb  00000000  00000000  00000a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000229  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000d84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000d5  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000002b  00000000  00000000  00000e99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
void ledblink();
void ledrun();


int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
    ledrun();
  74:	0e 94 6a 00 	call	0xd4	; 0xd4 <ledrun>
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
}
  7c:	cf 91       	pop	r28
  7e:	df 91       	pop	r29
  80:	08 95       	ret

00000082 <ledblink>:


void ledblink()
{
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	df 93       	push	r29
  88:	cf 93       	push	r28
  8a:	00 d0       	rcall	.+0      	; 0x8c <ledblink+0xa>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
	DDRC = 0x03; // set up 0 and 1 bits as output
  90:	84 e3       	ldi	r24, 0x34	; 52
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	23 e0       	ldi	r18, 0x03	; 3
  96:	fc 01       	movw	r30, r24
  98:	20 83       	st	Z, r18
	PORTC = 0x02; // it
  9a:	85 e3       	ldi	r24, 0x35	; 53
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	while (1)
	{
		PORTC ^= 0x03;
  a4:	85 e3       	ldi	r24, 0x35	; 53
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	25 e3       	ldi	r18, 0x35	; 53
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	f9 01       	movw	r30, r18
  ae:	30 81       	ld	r19, Z
  b0:	23 e0       	ldi	r18, 0x03	; 3
  b2:	23 27       	eor	r18, r19
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
  b8:	80 e5       	ldi	r24, 0x50	; 80
  ba:	93 ec       	ldi	r25, 0xC3	; 195
  bc:	9a 83       	std	Y+2, r25	; 0x02
  be:	89 83       	std	Y+1, r24	; 0x01
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	9a 81       	ldd	r25, Y+2	; 0x02
  c4:	8c 01       	movw	r16, r24
  c6:	c8 01       	movw	r24, r16
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <ledblink+0x46>
  cc:	8c 01       	movw	r16, r24
  ce:	1a 83       	std	Y+2, r17	; 0x02
  d0:	09 83       	std	Y+1, r16	; 0x01
		_delay_loop_2(50000);
	}
  d2:	e8 cf       	rjmp	.-48     	; 0xa4 <ledblink+0x22>

000000d4 <ledrun>:
}

void ledrun()
{
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	df 93       	push	r29
  da:	cf 93       	push	r28
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	28 97       	sbiw	r28, 0x08	; 8
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	f8 94       	cli
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF;
  ec:	8a e3       	ldi	r24, 0x3A	; 58
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
	int A = 0x00;
  f6:	1e 82       	std	Y+6, r1	; 0x06
  f8:	1d 82       	std	Y+5, r1	; 0x05
	int i = 0, j=1;
  fa:	1a 82       	std	Y+2, r1	; 0x02
  fc:	19 82       	std	Y+1, r1	; 0x01
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	9c 83       	std	Y+4, r25	; 0x04
 104:	8b 83       	std	Y+3, r24	; 0x03
	A = ~(A | 0x01);
 106:	8d 81       	ldd	r24, Y+5	; 0x05
 108:	9e 81       	ldd	r25, Y+6	; 0x06
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	80 95       	com	r24
 10e:	90 95       	com	r25
 110:	9e 83       	std	Y+6, r25	; 0x06
 112:	8d 83       	std	Y+5, r24	; 0x05
	while(1)
	{	
		PORTA = ~(0x01 << i);
 114:	8b e3       	ldi	r24, 0x3B	; 59
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	09 80       	ldd	r0, Y+1	; 0x01
 11e:	02 c0       	rjmp	.+4      	; 0x124 <ledrun+0x50>
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <ledrun+0x4c>
 128:	20 95       	com	r18
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
		i +=j;	
 12e:	29 81       	ldd	r18, Y+1	; 0x01
 130:	3a 81       	ldd	r19, Y+2	; 0x02
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	9c 81       	ldd	r25, Y+4	; 0x04
 136:	82 0f       	add	r24, r18
 138:	93 1f       	adc	r25, r19
 13a:	9a 83       	std	Y+2, r25	; 0x02
 13c:	89 83       	std	Y+1, r24	; 0x01
		if(i>=3 || i<=0)
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	9a 81       	ldd	r25, Y+2	; 0x02
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	91 05       	cpc	r25, r1
 146:	2c f4       	brge	.+10     	; 0x152 <ledrun+0x7e>
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	9a 81       	ldd	r25, Y+2	; 0x02
 14c:	18 16       	cp	r1, r24
 14e:	19 06       	cpc	r1, r25
 150:	3c f0       	brlt	.+14     	; 0x160 <ledrun+0x8c>
		{
			j*=-1;
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	9c 81       	ldd	r25, Y+4	; 0x04
 156:	90 95       	com	r25
 158:	81 95       	neg	r24
 15a:	9f 4f       	sbci	r25, 0xFF	; 255
 15c:	9c 83       	std	Y+4, r25	; 0x04
 15e:	8b 83       	std	Y+3, r24	; 0x03
 160:	80 e5       	ldi	r24, 0x50	; 80
 162:	93 ec       	ldi	r25, 0xC3	; 195
 164:	98 87       	std	Y+8, r25	; 0x08
 166:	8f 83       	std	Y+7, r24	; 0x07
 168:	8f 81       	ldd	r24, Y+7	; 0x07
 16a:	98 85       	ldd	r25, Y+8	; 0x08
 16c:	8c 01       	movw	r16, r24
 16e:	c8 01       	movw	r24, r16
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <ledrun+0x9c>
 174:	8c 01       	movw	r16, r24
 176:	18 87       	std	Y+8, r17	; 0x08
 178:	0f 83       	std	Y+7, r16	; 0x07
		}
		
		
		_delay_loop_2(50000);	
	}	
 17a:	cc cf       	rjmp	.-104    	; 0x114 <ledrun+0x40>

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
