
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000262  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000262  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000042  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000013b  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e4  00000000  00000000  00000bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027f  00000000  00000000  00000ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  00000f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000bc  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000002b  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_1>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_2>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 98 00 	call	0x130	; 0x130 <main>
  7a:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_1>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

volatile int duty = 10;
ISR(INT0_vect) { /* signal handler for external interrupt int0 */
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	2f 93       	push	r18
  8e:	8f 93       	push	r24
  90:	9f 93       	push	r25
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	
	duty+=50;
  9a:	80 91 60 00 	lds	r24, 0x0060
  9e:	90 91 61 00 	lds	r25, 0x0061
  a2:	c2 96       	adiw	r24, 0x32	; 50
  a4:	90 93 61 00 	sts	0x0061, r25
  a8:	80 93 60 00 	sts	0x0060, r24
	if(duty>300)
  ac:	80 91 60 00 	lds	r24, 0x0060
  b0:	90 91 61 00 	lds	r25, 0x0061
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	8d 32       	cpi	r24, 0x2D	; 45
  b8:	92 07       	cpc	r25, r18
  ba:	34 f0       	brlt	.+12     	; 0xc8 <__vector_1+0x46>
		duty = 300;
  bc:	8c e2       	ldi	r24, 0x2C	; 44
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	90 93 61 00 	sts	0x0061, r25
  c4:	80 93 60 00 	sts	0x0060, r24
   }
  c8:	cf 91       	pop	r28
  ca:	df 91       	pop	r29
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	2f 91       	pop	r18
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <__vector_2>:

ISR(INT1_vect) {    /* signal handler for external interrupt int1 */
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	df 93       	push	r29
  ec:	cf 93       	push	r28
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
   
	duty-=50;
  f2:	80 91 60 00 	lds	r24, 0x0060
  f6:	90 91 61 00 	lds	r25, 0x0061
  fa:	c2 97       	sbiw	r24, 0x32	; 50
  fc:	90 93 61 00 	sts	0x0061, r25
 100:	80 93 60 00 	sts	0x0060, r24
	if(duty<1)
 104:	80 91 60 00 	lds	r24, 0x0060
 108:	90 91 61 00 	lds	r25, 0x0061
 10c:	18 16       	cp	r1, r24
 10e:	19 06       	cpc	r1, r25
 110:	34 f0       	brlt	.+12     	; 0x11e <__vector_2+0x42>
		duty = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 61 00 	sts	0x0061, r25
 11a:	80 93 60 00 	sts	0x0060, r24
   }
 11e:	cf 91       	pop	r28
 120:	df 91       	pop	r29
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <main>:


int main(void)
{
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	df 93       	push	r29
 136:	cf 93       	push	r28
 138:	00 d0       	rcall	.+0      	; 0x13a <main+0xa>
 13a:	00 d0       	rcall	.+0      	; 0x13c <main+0xc>
 13c:	00 d0       	rcall	.+0      	; 0x13e <main+0xe>
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
	DDRD = 0x20;
 142:	81 e3       	ldi	r24, 0x31	; 49
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	20 e2       	ldi	r18, 0x20	; 32
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
	DDRB = 0xFF;
 14c:	87 e3       	ldi	r24, 0x37	; 55
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
	PORTB = 0xFE;
 156:	88 e3       	ldi	r24, 0x38	; 56
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	2e ef       	ldi	r18, 0xFE	; 254
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18
	GIMSK = (1<<INT0)|(1<<INT1);
 160:	8b e5       	ldi	r24, 0x5B	; 91
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	20 ec       	ldi	r18, 0xC0	; 192
 166:	fc 01       	movw	r30, r24
 168:	20 83       	st	Z, r18
	MCUCR |= ( 1 << ISC01 );
 16a:	85 e5       	ldi	r24, 0x55	; 85
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	25 e5       	ldi	r18, 0x55	; 85
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	f9 01       	movw	r30, r18
 174:	20 81       	ld	r18, Z
 176:	22 60       	ori	r18, 0x02	; 2
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18
	MCUCR &= ~( 1 << ISC00 ); 
 17c:	85 e5       	ldi	r24, 0x55	; 85
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	25 e5       	ldi	r18, 0x55	; 85
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	f9 01       	movw	r30, r18
 186:	20 81       	ld	r18, Z
 188:	2e 7f       	andi	r18, 0xFE	; 254
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
	MCUCR |= ( 1 << ISC11 );
 18e:	85 e5       	ldi	r24, 0x55	; 85
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	25 e5       	ldi	r18, 0x55	; 85
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	20 81       	ld	r18, Z
 19a:	28 60       	ori	r18, 0x08	; 8
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
	MCUCR &= ~( 1 << ISC10 );
 1a0:	85 e5       	ldi	r24, 0x55	; 85
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	25 e5       	ldi	r18, 0x55	; 85
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	f9 01       	movw	r30, r18
 1aa:	20 81       	ld	r18, Z
 1ac:	2b 7f       	andi	r18, 0xFB	; 251
 1ae:	fc 01       	movw	r30, r24
 1b0:	20 83       	st	Z, r18
    sei();       // enable interrupts 
 1b2:	78 94       	sei
	int incr = 0;
 1b4:	1a 82       	std	Y+2, r1	; 0x02
 1b6:	19 82       	std	Y+1, r1	; 0x01
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <main+0x8c>
		_delay_loop_2(500-duty);
		
		duty+=incr;
		if(duty>300 || duty<3)
			incr *=-1;
    }
 1ba:	00 00       	nop
    sei();       // enable interrupts 
	int incr = 0;
    while(1)
    {
        //TODO:: Please write your application code 
		PORTA = 0;
 1bc:	8b e3       	ldi	r24, 0x3B	; 59
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	10 82       	st	Z, r1
		_delay_loop_2(duty);
 1c4:	80 91 60 00 	lds	r24, 0x0060
 1c8:	90 91 61 00 	lds	r25, 0x0061
 1cc:	9c 83       	std	Y+4, r25	; 0x04
 1ce:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	9c 81       	ldd	r25, Y+4	; 0x04
 1d4:	8c 01       	movw	r16, r24
 1d6:	c8 01       	movw	r24, r16
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0xa8>
 1dc:	8c 01       	movw	r16, r24
 1de:	1c 83       	std	Y+4, r17	; 0x04
 1e0:	0b 83       	std	Y+3, r16	; 0x03
		PORTA = 0xFF;
 1e2:	8b e3       	ldi	r24, 0x3B	; 59
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
		_delay_loop_2(500-duty);
 1ec:	80 91 60 00 	lds	r24, 0x0060
 1f0:	90 91 61 00 	lds	r25, 0x0061
 1f4:	24 ef       	ldi	r18, 0xF4	; 244
 1f6:	31 e0       	ldi	r19, 0x01	; 1
 1f8:	a9 01       	movw	r20, r18
 1fa:	48 1b       	sub	r20, r24
 1fc:	59 0b       	sbc	r21, r25
 1fe:	ca 01       	movw	r24, r20
 200:	9e 83       	std	Y+6, r25	; 0x06
 202:	8d 83       	std	Y+5, r24	; 0x05
 204:	8d 81       	ldd	r24, Y+5	; 0x05
 206:	9e 81       	ldd	r25, Y+6	; 0x06
 208:	8c 01       	movw	r16, r24
 20a:	c8 01       	movw	r24, r16
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <main+0xdc>
 210:	8c 01       	movw	r16, r24
 212:	1e 83       	std	Y+6, r17	; 0x06
 214:	0d 83       	std	Y+5, r16	; 0x05
		
		duty+=incr;
 216:	20 91 60 00 	lds	r18, 0x0060
 21a:	30 91 61 00 	lds	r19, 0x0061
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	9a 81       	ldd	r25, Y+2	; 0x02
 222:	82 0f       	add	r24, r18
 224:	93 1f       	adc	r25, r19
 226:	90 93 61 00 	sts	0x0061, r25
 22a:	80 93 60 00 	sts	0x0060, r24
		if(duty>300 || duty<3)
 22e:	80 91 60 00 	lds	r24, 0x0060
 232:	90 91 61 00 	lds	r25, 0x0061
 236:	e1 e0       	ldi	r30, 0x01	; 1
 238:	8d 32       	cpi	r24, 0x2D	; 45
 23a:	9e 07       	cpc	r25, r30
 23c:	44 f4       	brge	.+16     	; 0x24e <main+0x11e>
 23e:	80 91 60 00 	lds	r24, 0x0060
 242:	90 91 61 00 	lds	r25, 0x0061
 246:	83 30       	cpi	r24, 0x03	; 3
 248:	91 05       	cpc	r25, r1
 24a:	0c f0       	brlt	.+2      	; 0x24e <main+0x11e>
 24c:	b6 cf       	rjmp	.-148    	; 0x1ba <main+0x8a>
			incr *=-1;
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	9a 81       	ldd	r25, Y+2	; 0x02
 252:	90 95       	com	r25
 254:	81 95       	neg	r24
 256:	9f 4f       	sbci	r25, 0xFF	; 255
 258:	9a 83       	std	Y+2, r25	; 0x02
 25a:	89 83       	std	Y+1, r24	; 0x01
    }
 25c:	af cf       	rjmp	.-162    	; 0x1bc <main+0x8c>

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
