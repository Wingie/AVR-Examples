
avr_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001d2  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000268  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000082  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000009b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000047  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000000eb  00000000  00000000  00000a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000008c  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000018e  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000040  00000000  00000000  00000d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000b1  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  00000e15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  8a:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
#include <util/delay.h>
#include <avr/interrupt.h>
volatile int led = 0xFE;
volatile int f = 0;

ISR(INT0_vect) { /* signal handler for external interrupt int0 */
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	df 93       	push	r29
  a2:	cf 93       	push	r28
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	
	f++;
  a8:	80 91 62 00 	lds	r24, 0x0062
  ac:	90 91 63 00 	lds	r25, 0x0063
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	90 93 63 00 	sts	0x0063, r25
  b6:	80 93 62 00 	sts	0x0062, r24
	
	if(f>3)
  ba:	80 91 62 00 	lds	r24, 0x0062
  be:	90 91 63 00 	lds	r25, 0x0063
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	91 05       	cpc	r25, r1
  c6:	34 f0       	brlt	.+12     	; 0xd4 <__vector_1+0x42>
		f=3;
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 63 00 	sts	0x0063, r25
  d0:	80 93 62 00 	sts	0x0062, r24
   }
  d4:	cf 91       	pop	r28
  d6:	df 91       	pop	r29
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_2>:

ISR(INT1_vect) {    /* signal handler for external interrupt int1 */
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	df 93       	push	r29
  f6:	cf 93       	push	r28
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
   
	f--;
  fc:	80 91 62 00 	lds	r24, 0x0062
 100:	90 91 63 00 	lds	r25, 0x0063
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	90 93 63 00 	sts	0x0063, r25
 10a:	80 93 62 00 	sts	0x0062, r24
	if(f<0)
 10e:	80 91 62 00 	lds	r24, 0x0062
 112:	90 91 63 00 	lds	r25, 0x0063
 116:	99 23       	and	r25, r25
 118:	24 f4       	brge	.+8      	; 0x122 <__vector_2+0x3c>
		f=0;
 11a:	10 92 63 00 	sts	0x0063, r1
 11e:	10 92 62 00 	sts	0x0062, r1
			
   }
 122:	cf 91       	pop	r28
 124:	df 91       	pop	r29
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <main>:

int main(void) {
 134:	df 93       	push	r29
 136:	cf 93       	push	r28
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62


    DDRB = 0xFF;      
 13c:	87 e3       	ldi	r24, 0x37	; 55
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
	PORTB = 0x33;
 146:	88 e3       	ldi	r24, 0x38	; 56
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	23 e3       	ldi	r18, 0x33	; 51
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
    DDRD = 0x00;     
 150:	81 e3       	ldi	r24, 0x31	; 49
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	fc 01       	movw	r30, r24
 156:	10 82       	st	Z, r1
	GIMSK = (1<<INT0)|(1<<INT1);
 158:	8b e5       	ldi	r24, 0x5B	; 91
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	20 ec       	ldi	r18, 0xC0	; 192
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
	MCUCR |= ( 1 << ISC01 );
 162:	85 e5       	ldi	r24, 0x55	; 85
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	25 e5       	ldi	r18, 0x55	; 85
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	20 81       	ld	r18, Z
 16e:	22 60       	ori	r18, 0x02	; 2
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
	MCUCR &= ~( 1 << ISC00 ); 
 174:	85 e5       	ldi	r24, 0x55	; 85
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	25 e5       	ldi	r18, 0x55	; 85
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	f9 01       	movw	r30, r18
 17e:	20 81       	ld	r18, Z
 180:	2e 7f       	andi	r18, 0xFE	; 254
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18
	MCUCR |= ( 1 << ISC11 );
 186:	85 e5       	ldi	r24, 0x55	; 85
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	25 e5       	ldi	r18, 0x55	; 85
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	f9 01       	movw	r30, r18
 190:	20 81       	ld	r18, Z
 192:	28 60       	ori	r18, 0x08	; 8
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18
	MCUCR &= ~( 1 << ISC10 ); 
 198:	85 e5       	ldi	r24, 0x55	; 85
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	25 e5       	ldi	r18, 0x55	; 85
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	f9 01       	movw	r30, r18
 1a2:	20 81       	ld	r18, Z
 1a4:	2b 7f       	andi	r18, 0xFB	; 251
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18

    sei();       /* enable interrupts */
 1aa:	78 94       	sei

    //1, 3, 7. 15
	//int arr[4] = {~1,~3,~7,~15};
		
    while(1) {
		led = 0xFE<<f;
 1ac:	20 91 62 00 	lds	r18, 0x0062
 1b0:	30 91 63 00 	lds	r19, 0x0063
 1b4:	8e ef       	ldi	r24, 0xFE	; 254
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 2e       	mov	r0, r18
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <main+0x8c>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	0a 94       	dec	r0
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <main+0x88>
 1c4:	90 93 61 00 	sts	0x0061, r25
 1c8:	80 93 60 00 	sts	0x0060, r24
		
	}                      /* loop forever */
 1cc:	ef cf       	rjmp	.-34     	; 0x1ac <main+0x78>

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
